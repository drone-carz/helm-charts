{{- $root := . -}}
{{- range .Values.users }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{.}}-space
  namespace: {{ $root.Release.Namespace | quote }}
  labels:
    app: {{.}}-space
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: {{.}}-space
  template:
    metadata:
      labels:
        app: {{.}}-space
    spec:
      serviceAccountName: airflow-scheduler
      initContainers:
      - name: bash-command
        image: bash
        command: ["chown", "-R", "1000:1000", "/volume"]
        volumeMounts:
        - mountPath: /volume
          name: user-disk
        - mountPath: /volume/project
          name: user-disk
          subPath: project
        imagePullPolicy: Always
      - name: registry-credentials
        image: registry:2
        command: ["htpasswd", "-Bbc", "/auth/htpasswd", "{{.}}", "$(USER_PASSWORD)"]
        env:
        - name: USER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{.}}-registry-secret
              key: password
        - name: FORCE_RELOAD
          value: {{randAlphaNum 16 | quote}}
        volumeMounts:
        - mountPath: /auth
          name: user-disk
          subPath: auth
        imagePullPolicy: Always 
      containers:
      - name: oauth
        image: quay.io/pusher/oauth2_proxy:v5.0.0
        env:
        - name: OAUTH2_PROXY_PROVIDER
          value: {{ $root.Values.oauth.proxyProvider | quote }}
        - name: OAUTH2_PROXY_COOKIE_SECRET
          value: {{ $root.Values.oauth.cookieSecret | quote }}
        - name: OAUTH2_PROXY_CLIENT_ID
          value: {{ $root.Values.oauth.clientId | quote }}
        - name: OAUTH2_PROXY_CLIENT_SECRET
          value: {{ $root.Values.oauth.clientSecret | quote }}
        - name: OAUTH2_PROXY_EMAIL_DOMAINS
          value: {{ $root.Values.oauth.emailDomains | quote }}
        - name: OAUTH2_PROXY_UPSTREAMS
          value: http://localhost:80
        - name: OAUTH2_PROXY_HTTP_ADDRESS
          value: :29180
        - name: OAUTH2_PROXY_REDIRECT_URL
          value: {{ $root.Values.oauth.redirectUrl | quote }}
        resources:
          requests:
            memory: 10Mi
        ports:
        - containerPort: 29180
        imagePullPolicy: Always
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80
        volumeMounts:
          - mountPath: /etc/nginx/conf.d/default.conf
            subPath: default.conf
            name: user-proxy-cfg
          - mountPath: /usr/share/nginx/html/index.html
            subPath: index.html
            name: user-apps-html
          - mountPath: /usr/share/nginx/html/password
            name: registry-secret
            subPath: password
        imagePullPolicy: Always
      - name: vscode
        args: ['--auth', 'none', '--port', '29901']
        image: {{ $root.Values.applications.vscode.image }}
        env:
        - name: USERNAME
          value: {{.}}
        - name: K8S_USER
          value: {{.}}
        - name: K8S_KANIKO_VOLUME_SUBPATH
          value: kaniko
        - name: K8S_KANIKO_VOLUME_CLAIM
          value: {{.}}-file-data
        - name: K8S_REGISTRY_SECRET_NAME
          value: {{.}}-registry-secret
        - name: K8S_NAMESPACE
          value: {{ $root.Release.Namespace | quote }}
        - name: MLFLOW_TRACKING_URI
          value: http://shared-space:5000
        ports:
        - containerPort: 29901
        resources: 
          requests:
            memory: 200Mi
        volumeMounts:
        - mountPath: /home/coder/
          name: user-disk
        - mountPath: /home/coder/project/
          name: user-disk
          subPath: project
        - mountPath: /home/coder/airflow/dags
          name: user-file-data
          subPath: dags
        - mountPath: /home/coder/kaniko
          name: user-file-data
          subPath: kaniko
        - mountPath: /home/coder/shared
          name: shared-file
        - mountPath: /home/coder/airflow/logs
          name: user-file-logs
        imagePullPolicy: Always
      - name: jupyter
        image: {{ $root.Values.applications.jupyter.image }}
        command: ["jupyter", "notebook","--NotebookApp.token=''", "--NotebookApp.base_url=/jupyter", "--port", "29902"]
        ports:
        - containerPort: 29902
        resources: 
          requests:
            memory: 200Mi
        volumeMounts:
        - mountPath: /home/jovyan/
          name: user-disk
        - mountPath: /home/jovyan/project/
          name: user-disk
          subPath: project
        - mountPath: /home/jovyan/airflow/dags
          name: user-file-data
          subPath: dags
        - mountPath: /home/jovyan/airflow/logs
          name: user-file-logs
        - mountPath: /home/jovyan/kaniko
          name: user-file-data
          subPath: kaniko
        - mountPath: /home/jovyan/shared
          name: shared-file
        imagePullPolicy: Always
      - name: postgres
        image: postgres:9.6
        args: ['-p', '29432']
        env:
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_DB
          value: airflow
        - name: POSTGRES_PASSWORD
          value: airflow  
        - name: POSTGRES_USER
          value: airflow
        ports:
        - containerPort: 29432
        resources: 
          requests:
            memory: 128Mi
        imagePullPolicy: Always
      - name: airflow-webserver
        image: "{{ $root.Values.applications.airflow.image }}:{{ $root.Values.applications.airflow.tag }}"
        # command: ["sh", "-c", "airflow initdb
        #   && airflow create_user -r Admin -u admin -f admin -p admin -l default -e default
        #   && airflow webserver"]
        command: ["sh", "-c", "sleep 30 && airflow initdb && airflow webserver"]
        env:
        - name: AIRFLOW_HOME
          value: /home/engineer/
        - name: AIRFLOW__CORE__DAGS_FOLDER
          value: /home/engineer/dags
        - name: AIRFLOW__CORE__BASE_LOG_FOLDER
          value: /home/engineer/logs
        - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
          value: postgresql+psycopg2://airflow:airflow@{{.}}-space:29432/airflow
        - name: AIRFLOW__CORE__FERNET_KEY
          value: hm2d6x0yCzwg7AmhsjIByJGtoP1ZpIdFBPZFFrPfxHw=
        - name: AIRFLOW__CORE__EXECUTOR
          value: KubernetesExecutor
        - name: AIRFLOW__CORE__LOAD_EXAMPLES
          value: 'False'
        - name: AIRFLOW__WEBSERVER__RBAC
          value: 'False'
        - name: AIRFLOW__WEBSERVER__BASE_URL
          value: http://127.0.0.1:29903/airflow
        - name: AIRFLOW__WEBSERVER__WEB_SERVER_HOST
          value: '127.0.0.1'
        - name: AIRFLOW__WEBSERVER__WEB_SERVER_PORT
          value: '29903'
        - name: AIRFLOW__WEBSERVER__AUTHENTICATE
          value: 'False'
        - name: AIRFLOW__KUBERNETES__DAGS_VOLUME_CLAIM
          value: {{.}}-file-dags
        - name: AIRFLOW__KUBERNETES__LOGS_VOLUME_CLAIM
          value: {{.}}-file-logs
        ports:
        - containerPort: 29903
        volumeMounts:
        - mountPath: /home/engineer/dags
          name: user-file-data
          subPath: dags
        - mountPath: /home/engineer/logs
          name: user-file-logs
        imagePullPolicy: Always
      - name: airflow-scheduler
        image: "{{ $root.Values.applications.airflow.image }}:{{ $root.Values.applications.airflow.tag }}"
        command: ["sh", "-c", "sleep 30 && airflow initdb && airflow scheduler"]
        env:
        - name: AIRFLOW_HOME
          value: /home/engineer/
        - name: AIRFLOW__CORE__DAGS_FOLDER
          value: /home/engineer/dags
        - name: AIRFLOW__CORE__BASE_LOG_FOLDER
          value: /home/engineer/logs
        - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
          value: postgresql+psycopg2://airflow:airflow@{{.}}-space:29432/airflow
        - name: AIRFLOW__CORE__FERNET_KEY
          value: "hm2d6x0yCzwg7AmhsjIByJGtoP1ZpIdFBPZFFrPfxHw="
        - name: AIRFLOW__CORE__LOAD_EXAMPLES
          value: 'False'
        - name: AIRFLOW__CORE__DEFAULT_IMPERSONATION
          value: engineer
        - name: AIRFLOW__WEBSERVER__RBAC
          value: 'True'
        - name: AIRFLOW__CORE__EXECUTOR
          value: KubernetesExecutor
        - name: AIRFLOW__SCHEDULER__MIN_FILE_PROCESS_INTERVAL
          value: '30'
        - name: AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL
          value: '60'
        # - name: AIRFLOW__SCHEDULER__RUN_DURATION
        #   value: '610'
        # - name: AIRFLOW__SCHEDULER__NUM_RUNS
        #   value: '3'
        # - name: AIRFLOW__CORE__DAG_DISCOVERY_SAFE_MODE
        #   value: 'False'
        - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
          value: "hm2d6x0yCzwg7AmhsjIByJGtoP1ZpIdFBPZFFrPfxHw="
        - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__MEMCACHE_HOST
          value: {{.}}-space
        - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__DEFAULT_IMPERSONATION
          value: engineer
        - name: AIRFLOW__KUBERNETES__NAMESPACE
          value: {{ $root.Release.Namespace | quote }}
        - name: AIRFLOW__KUBERNETES__WORKER_CONTAINER_REPOSITORY
          value: {{ $root.Values.applications.airflow.image }}
        - name: AIRFLOW__KUBERNETES__WORKER_CONTAINER_TAG
          value: {{ $root.Values.applications.airflow.tag }}
        - name: AIRFLOW__KUBERNETES__WORKER_CONTAINER_IMAGE_PULL_POLICY
          value: Always
        - name: AIRFLOW__KUBERNETES__IMAGE_PULL_SECRETS
          value: {{.}}-registry-secret{{range $root.Values.imagePullSecrets}},{{ required "A valid name secret!" .name }}{{end}}
        - name: AIRFLOW__KUBERNETES__DAGS_VOLUME_CLAIM
          value: {{.}}-file-data
        - name: AIRFLOW__KUBERNETES__DAGS_VOLUME_SUBPATH
          value: dags
        - name: AIRFLOW__KUBERNETES__LOGS_VOLUME_CLAIM
          value: {{.}}-file-logs
        - name: AIRFLOW__KUBERNETES__WORKER_SERVICE_ACCOUNT_NAME
          value: airflow-scheduler
        - name: AIRFLOW__KUBERNETES__RUN_AS_USER
          value: '1000'
        - name: AIRFLOW__KUBERNETES__FS_GROUP
          value: '1000'
        volumeMounts:
        - mountPath: /home/engineer/dags
          name: user-file-data
          subPath: dags
        - mountPath: /home/engineer/logs
          name: user-file-logs
        imagePullPolicy: Always
      - name: memcached
        image: memcached
        ports:
        - containerPort: 11211
        resources: 
          requests:
            memory: 32Mi
      - name: firefox
        image: jlesage/firefox
        env:
        - name: DISPLAY_WIDTH
          value: '1920'
        - name: DISPLAY_HEIGHT
          value: '1080'
        ports:
        - containerPort: 5800
        volumeMounts:
          - mountPath: /dev/shm
            name: dshm
        imagePullPolicy: Always
      - name: registry
        image: registry:2
        env:
        - name: REGISTRY_AUTH
          value: htpasswd
        - name: REGISTRY_AUTH_HTPASSWD_REALM
          value: "Registry Realm"
        - name: REGISTRY_AUTH_HTPASSWD_PATH
          value: /auth/htpasswd
        - name: USER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{.}}-registry-secret
              key: password
        ports:
        - containerPort: 29500
        volumeMounts:
          - mountPath: /etc/docker/registry/config.yml
            subPath: config.yaml
            name: registry-cfg
          - mountPath: /auth
            name: user-disk
            subPath: auth
          - mountPath: /var/lib/registry
            name: user-disk
            subPath: docker-registry
        imagePullPolicy: Always
      - name: ws-tunnel
        image: raizenanalyticsdev.azurecr.io/ws-tunnel-server
        args: ['-addr', 'localhost:22', '-path', 'ssh']
        ports:
          - containerPort: 9191
      imagePullSecrets: {{- toYaml $root.Values.imagePullSecrets | nindent 8 }}
      volumes:
        - name: user-disk
          persistentVolumeClaim:
            claimName: {{.}}-disk
        - name: user-file-data
          persistentVolumeClaim:
            claimName: {{.}}-file-data
        - name: user-file-logs
          persistentVolumeClaim:
            claimName: {{.}}-file-logs
        - name: shared-file
          persistentVolumeClaim:
            claimName: shared-file
        - name: user-proxy-cfg
          configMap:
            name: {{ . }}-nginx-cfg
            items:
            - key: default.conf
              path: default.conf
        - name: registry-cfg
          configMap:
            name: {{.}}-registry-cfg
            items:
            - key: config.yaml
              path: config.yaml
        - name: user-apps-html
          configMap:
            name: {{.}}-apps-html
            items:
            - key: index.html
              path: index.html
        - name: registry-secret
          secret:
            secretName: {{.}}-registry-secret
            items:
            - key: password
              path: password
        - name: dshm
          emptyDir:
            medium: Memory
{{- end }}